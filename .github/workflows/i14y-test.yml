name: I14Y Test Harvester ABN

on:
  schedule:
    - cron: '0 0 * * *'  # Runs every day at midnight
  workflow_dispatch:  # Allows manual triggering

jobs:
  harvest-data:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    #- name: Download previous refresh token
    #  uses: actions/download-artifact@v4
    #  continue-on-error: true  # first run
    #  with:
    #    name: refresh-token
    #    path: .

    - name: Download previous refresh token
      uses: dawidd6/action-download-artifact@v4
      continue-on-error: true  # first run
      with:
        name: refresh-token
        workflow: i14y-test.yml  
        workflow_conclusion: success
        if_no_artifact_found: warn
        path: .

    - name: Debug download
      run: |
        echo "Download status: ${{ steps.download-token.outcome }}"
        echo "Current directory contents:"
        ls -la
        echo "Looking for refresh_token.json:"
        find . -type f -name "refresh_token.json" || echo "refresh_token.json not found"
        
    - name: Download previous data
      uses: dawidd6/action-download-artifact@v4
      continue-on-error: true
      with:
        name: data-json
        workflow: i14y-test.yml
        workflow_conclusion: success
        if_no_artifact_found: warn
        path: i14y-test/data
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Get or refresh token
      id: get-token
      run: |
        python - <<EOF
        import requests
        import os
        import json

        def get_token_with_refresh(client_key,client_key_secret,refresh_token):
            data = {
                'grant_type': 'refresh_token',
                'refresh_token': refresh_token,
            }
            response = requests.post('${{ secrets.URL_TOKEN_REFRESH }}', data=data, verify=False, auth=(client_key,client_key_secret))
            if response.status_code >= 400:
              raise Exception("Failed to get token")
            return response.json()
        
        try: 
            workspace = os.getcwd()
            token_path = os.path.join(workspace, 'refresh_token.json')
            print(f"Looking for token at: {token_path}")
            
            with open(token_path, 'r') as f:
                stored_data = json.load(f)
                refresh_token = stored_data['refresh_token']
                print("Successfully loaded stored refresh token")
        except FileNotFoundError:
            refresh_token = '${{ secrets.INITIAL_REFRESH_TOKEN }}'
            print("Using initial refresh token")

        result = get_token_with_refresh('${{ secrets.CLIENT_KEY }}','${{ secrets.CLIENT_KEY_SECRET }}', refresh_token)
        
        # Save new token
        with open(token_path, 'w') as f:
            json.dump({
                'refresh_token': result['refresh_token']
            }, f)
            print("New refresh token saved")
        
        print(f"::set-output name=access_token::{result['access_token']}")
        EOF

    - name: Run harvester script
      env:
        GET_ENDPOINT_FROM: ${{ secrets.GET_ENDPOINT_FROM }}
        GET_ENDPOINT_TO: ${{ secrets.GET_ENDPOINT_TO }}
        POST_ENDPOINT: ${{ secrets.POST_ENDPOINT }}
        ACCESS_TOKEN: ${{ steps.get-token.outputs.access_token }}
      run: python scripts/i14y-test/harvester_test.py

    - name: Store refresh token
      uses: actions/upload-artifact@v4
      with:
        name: refresh-token
        path: refresh_token.json
        retention-days: 2
    
    - name: Upload log
      uses: actions/upload-artifact@v4
      with:
        name: harvest-log
        path: harvest_log.txt

    - name: Upload updated data
      uses: actions/upload-artifact@v4
      with:
        name: data-json
        path: i14y-test/data/data.json
        retention-days: 2
